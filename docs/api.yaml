openapi: 3.0.3
info:
  title: WordWise Book Review Platform API
  description: |
    A comprehensive REST API for the WordWise book review platform. This API provides endpoints for user authentication, book management, reviews, ratings, recommendations, and user profiles.
    
    ## Features
    - JWT-based authentication with refresh tokens
    - Book search and discovery
    - Review and rating system
    - AI-powered recommendations
    - User profile management
    - Popular books analytics
    
    ## Authentication
    Most endpoints require authentication using JWT tokens. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    API requests are rate limited to 100 requests per 15 minutes per IP address in production.
    
    ## Error Handling
    All errors follow a consistent format:
    ```json
    {
      "success": false,
      "error": {
        "message": "Error description",
        "code": "ERROR_CODE",
        "details": "Additional error details"
      }
    }
    ```
  version: 1.0.0
  contact:
    name: WordWise Development Team
    email: dev@wordwise.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api/v1
    description: Development server
  - url: https://api.wordwise.com/api/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Books
    description: Book management and discovery
  - name: Reviews
    description: Book reviews and ratings
  - name: Users
    description: User profile management
  - name: Recommendations
    description: AI-powered book recommendations
  - name: Popular Books
    description: Trending and popular books analytics

paths:
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check API health and database connectivity
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Book Review Platform API is running"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2024-01-01T00:00:00.000Z"
                      environment:
                        type: string
                        example: "production"
                      version:
                        type: string
                        example: "1.0.0"
                      database:
                        type: string
                        example: "connected"
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return JWT tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Get the profile of the currently authenticated user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logout the current user (client-side token invalidation)
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a paginated list of all books
      operationId: getAllBooks
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of books per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sortBy
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            enum: [title, author, averageRating, reviewCount, createdAt]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'

  /books/search:
    get:
      tags:
        - Books
      summary: Search books
      description: Search books by title, author, or description
      operationId: searchBooks
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
            minLength: 1
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of books per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'

  /books/popular:
    get:
      tags:
        - Books
      summary: Get popular books
      description: Retrieve a list of popular books based on ratings and reviews
      operationId: getPopularBooks
      parameters:
        - name: limit
          in: query
          description: Number of books to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Popular books retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'

  /books/genre/{genre}:
    get:
      tags:
        - Books
      summary: Get books by genre
      description: Retrieve books filtered by genre
      operationId: getBooksByGenre
      parameters:
        - name: genre
          in: path
          description: Book genre
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of books per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'

  /books/{id}:
    get:
      tags:
        - Books
      summary: Get book by ID
      description: Retrieve a specific book by its ID
      operationId: getBookById
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews:
    post:
      tags:
        - Reviews
      summary: Create a new review
      description: Create a new book review
      operationId: createReview
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews/book/{bookId}:
    get:
      tags:
        - Reviews
      summary: Get reviews for a book
      description: Retrieve all reviews for a specific book
      operationId: getReviewsByBook
      parameters:
        - name: bookId
          in: path
          description: Book ID
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of reviews per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsResponse'

  /reviews/user/{userId}:
    get:
      tags:
        - Reviews
      summary: Get reviews by user
      description: Retrieve all reviews by a specific user
      operationId: getReviewsByUser
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of reviews per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsResponse'

  /reviews/{id}:
    get:
      tags:
        - Reviews
      summary: Get review by ID
      description: Retrieve a specific review by its ID
      operationId: getReviewById
      parameters:
        - name: id
          in: path
          description: Review ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Review retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Reviews
      summary: Update review
      description: Update an existing review
      operationId: updateReview
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Review ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReviewRequest'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - not the review owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Reviews
      summary: Delete review
      description: Delete an existing review
      operationId: deleteReview
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Review ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Review deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - not the review owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Retrieve a user's public profile
      operationId: getUserProfile
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}/favorites:
    get:
      tags:
        - Users
      summary: Get user's favorite books
      description: Retrieve a user's favorite books
      operationId: getUserFavorites
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of books per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Favorite books retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - not the user's favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /recommendations:
    get:
      tags:
        - Recommendations
      summary: Get AI-powered recommendations
      description: Get personalized book recommendations for the current user
      operationId: getRecommendations
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of recommendations to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Recommendations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /recommendations/similar/{bookId}:
    get:
      tags:
        - Recommendations
      summary: Get similar books
      description: Get books similar to the specified book
      operationId: getSimilarBooks
      parameters:
        - name: bookId
          in: path
          description: Book ID
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Number of similar books to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Similar books retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /popular-books:
    get:
      tags:
        - Popular Books
      summary: Get trending books
      description: Get currently trending books based on recent activity
      operationId: getTrendingBooks
      parameters:
        - name: limit
          in: query
          description: Number of books to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Trending books retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            message:
              type: string
              example: "Error description"
            code:
              type: string
              example: "ERROR_CODE"
            details:
              type: string
              example: "Additional error details"

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "John Doe"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "password123"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            accessToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expiresIn:
              type: integer
              example: 900

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'

    Book:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "The Great Gatsby"
        author:
          type: string
          example: "F. Scott Fitzgerald"
        description:
          type: string
          example: "A classic American novel..."
        coverImageUrl:
          type: string
          format: uri
          example: "https://example.com/cover.jpg"
        genres:
          type: array
          items:
            type: string
          example: ["Fiction", "Classic Literature"]
        publishedYear:
          type: integer
          example: 1925
        averageRating:
          type: number
          format: decimal
          example: 4.2
        reviewCount:
          type: integer
          example: 150
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"

    BookResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Book'

    BooksResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            books:
              type: array
              items:
                $ref: '#/components/schemas/Book'
            pagination:
              $ref: '#/components/schemas/Pagination'

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        bookId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        content:
          type: string
          example: "This is a great book!"
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        user:
          $ref: '#/components/schemas/User'
        book:
          $ref: '#/components/schemas/Book'

    ReviewResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Review'

    ReviewsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            reviews:
              type: array
              items:
                $ref: '#/components/schemas/Review'
            pagination:
              $ref: '#/components/schemas/Pagination'

    CreateReviewRequest:
      type: object
      required:
        - bookId
        - rating
      properties:
        bookId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        content:
          type: string
          maxLength: 2000
          example: "This is a great book!"
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5

    UpdateReviewRequest:
      type: object
      properties:
        content:
          type: string
          maxLength: 2000
          example: "Updated review content"
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 4

    RecommendationsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            recommendations:
              type: array
              items:
                $ref: '#/components/schemas/Book'
            reason:
              type: string
              example: "Based on your reading history and preferences"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false
