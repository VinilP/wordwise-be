// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  reviews   Review[]
  favorites UserFavorite[]

  @@map("users")
}

model Book {
  id             String   @id @default(uuid())
  title          String
  author         String
  description    String?  @db.Text
  coverImageUrl  String?  @map("cover_image_url")
  genres         String[] @default([])
  publishedYear  Int?     @map("published_year")
  averageRating  Decimal? @default(0) @map("average_rating") @db.Decimal(3, 2)
  reviewCount    Int      @default(0) @map("review_count")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  reviews   Review[]
  favorites UserFavorite[]

  // Indexes for search performance
  @@index([title])
  @@index([author])
  @@index([genres])
  @@map("books")
}

model Review {
  id        String   @id @default(uuid())
  bookId    String   @map("book_id")
  userId    String   @map("user_id")
  content   String?  @db.Text
  rating    Int      @db.SmallInt
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([bookId, userId]) // One review per user per book
  @@index([bookId])
  @@index([userId])
  @@map("reviews")
}

model UserFavorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  bookId    String   @map("book_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, bookId]) // One favorite per user per book
  @@index([userId])
  @@index([bookId])
  @@map("user_favorites")
}
