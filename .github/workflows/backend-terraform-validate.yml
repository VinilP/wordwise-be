name: Terraform Validation

on:
  push:
    branches: [main, develop, staging]
    paths:
      - 'backend/terraform/**'
      - '.github/workflows/terraform-validate.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/terraform/**'
      - '.github/workflows/terraform-validate.yml'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: us-east-1

jobs:
  terraform-validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Run tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Initialize tflint
        run: tflint --init

      - name: Run tflint
        run: tflint --format compact

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: backend/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validate]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        environment: [dev, staging, prod]
    defaults:
      run:
        working-directory: ./backend/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Create environment tfvars if not exists
        run: |
          if [ ! -f "environments/${{ matrix.environment }}.tfvars" ]; then
            cp "environments/${{ matrix.environment }}.tfvars.example" "environments/${{ matrix.environment }}.tfvars"
          fi

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file="environments/${{ matrix.environment }}.tfvars" -no-color -out=tfplan-${{ matrix.environment }}
        continue-on-error: true

      - name: Generate Plan Summary
        run: |
          terraform show -no-color tfplan-${{ matrix.environment }} > plan-output-${{ matrix.environment }}.txt

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: backend/terraform/plan-output-${{ matrix.environment }}.txt

      - name: Comment Plan on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('backend/terraform/plan-output-${{ matrix.environment }}.txt', 'utf8');
            
            const maxLength = 65000; // GitHub comment limit
            const truncatedOutput = planOutput.length > maxLength 
              ? planOutput.substring(0, maxLength) + '\n\n... (output truncated)'
              : planOutput;
            
            const output = `
            ## Terraform Plan - ${{ matrix.environment }}
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`
            ${truncatedOutput}
            \`\`\`
            
            </details>
            
            Plan Status: ${{ steps.plan.outcome }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-cost-estimate:
    name: Terraform Cost Estimation
    runs-on: ubuntu-latest
    needs: [terraform-validate]
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ./backend/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Install Infracost
        run: |
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

      - name: Generate Infracost baseline
        run: |
          # Create baseline for production environment
          if [ ! -f "environments/prod.tfvars" ]; then
            cp "environments/prod.tfvars.example" "environments/prod.tfvars"
          fi
          
          infracost breakdown --path . \
            --terraform-var-file environments/prod.tfvars \
            --format json \
            --out-file infracost-base.json
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost diff
        run: |
          infracost diff --path . \
            --terraform-var-file environments/prod.tfvars \
            --compare-to infracost-base.json \
            --format json \
            --out-file infracost-diff.json
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

      - name: Post Infracost comment
        run: |
          infracost comment github --path infracost-diff.json \
            --repo $GITHUB_REPOSITORY \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --pull-request ${{ github.event.pull_request.number }} \
            --behavior update
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

  terraform-docs:
    name: Update Terraform Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./backend/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Terraform docs
        uses: terraform-docs/gh-actions@main
        with:
          working-dir: backend/terraform
          output-file: README.md
          output-method: inject
          git-push: "true"
          git-commit-message: "docs: update terraform documentation"