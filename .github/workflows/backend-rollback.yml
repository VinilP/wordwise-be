name: Manual Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      rollback_type:
        description: 'Type of rollback'
        required: true
        type: choice
        options:
          - previous_version
          - specific_version
          - database_restore
      target_version:
        description: 'Target version (for specific_version rollback)'
        required: false
        type: string
      snapshot_id:
        description: 'Database snapshot ID (for database_restore)'
        required: false
        type: string
      confirm_rollback:
        description: 'Type "CONFIRM" to proceed with rollback'
        required: true
        type: string

env:
  AWS_REGION: us-east-1

jobs:
  validate-inputs:
    name: Validate Rollback Inputs
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_rollback }}" != "CONFIRM" ]; then
            echo "Rollback not confirmed. Please type 'CONFIRM' to proceed."
            exit 1
          fi

      - name: Validate specific version input
        if: github.event.inputs.rollback_type == 'specific_version'
        run: |
          if [ -z "${{ github.event.inputs.target_version }}" ]; then
            echo "Target version is required for specific_version rollback"
            exit 1
          fi

      - name: Validate snapshot ID input
        if: github.event.inputs.rollback_type == 'database_restore'
        run: |
          if [ -z "${{ github.event.inputs.snapshot_id }}" ]; then
            echo "Snapshot ID is required for database_restore rollback"
            exit 1
          fi

  rollback-application:
    name: Rollback Application
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: github.event.inputs.rollback_type != 'database_restore'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Get infrastructure outputs
        id: infra
        run: |
          cd backend/terraform
          terraform init
          
          # Set environment file based on input
          ENV_FILE="environments/${{ github.event.inputs.environment }}.tfvars"
          if [ "${{ github.event.inputs.environment }}" = "development" ]; then
            ENV_FILE="environments/dev.tfvars"
          fi
          
          terraform refresh -var-file="$ENV_FILE"
          
          ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)
          ECS_SERVICE=$(terraform output -raw ecs_service_name)
          ALB_DNS=$(terraform output -raw alb_dns_name)
          
          echo "ecs-cluster=$ECS_CLUSTER" >> $GITHUB_OUTPUT
          echo "ecs-service=$ECS_SERVICE" >> $GITHUB_OUTPUT
          echo "app-url=https://$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Get current service configuration
        id: current
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ steps.infra.outputs.ecs-cluster }} \
            --services ${{ steps.infra.outputs.ecs-service }} \
            --query 'services[0].taskDefinition' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          FAMILY=$(echo $CURRENT_TASK_DEF | cut -d':' -f1)
          CURRENT_REVISION=$(echo $CURRENT_TASK_DEF | cut -d':' -f2)
          
          echo "current-task-def=$CURRENT_TASK_DEF" >> $GITHUB_OUTPUT
          echo "family=$FAMILY" >> $GITHUB_OUTPUT
          echo "current-revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT

      - name: Determine target revision
        id: target
        run: |
          FAMILY="${{ steps.current.outputs.family }}"
          CURRENT_REVISION=${{ steps.current.outputs.current-revision }}
          
          if [ "${{ github.event.inputs.rollback_type }}" = "previous_version" ]; then
            TARGET_REVISION=$((CURRENT_REVISION - 1))
          else
            TARGET_REVISION="${{ github.event.inputs.target_version }}"
          fi
          
          if [ $TARGET_REVISION -le 0 ]; then
            echo "Invalid target revision: $TARGET_REVISION"
            exit 1
          fi
          
          # Verify target revision exists
          if ! aws ecs describe-task-definition \
            --task-definition "$FAMILY:$TARGET_REVISION" \
            --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "Task definition $FAMILY:$TARGET_REVISION does not exist"
            exit 1
          fi
          
          echo "target-revision=$TARGET_REVISION" >> $GITHUB_OUTPUT
          echo "target-task-def=$FAMILY:$TARGET_REVISION" >> $GITHUB_OUTPUT

      - name: Create pre-rollback backup
        run: |
          # Create RDS snapshot before rollback
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SNAPSHOT_ID="book-review-platform-${{ github.event.inputs.environment }}-pre-rollback-$TIMESTAMP"
          
          DB_IDENTIFIER="book-review-platform-${{ github.event.inputs.environment }}-db"
          if [ "${{ github.event.inputs.environment }}" = "development" ]; then
            DB_IDENTIFIER="book-review-platform-dev-db"
          fi
          
          aws rds create-db-snapshot \
            --db-instance-identifier $DB_IDENTIFIER \
            --db-snapshot-identifier $SNAPSHOT_ID \
            --region ${{ env.AWS_REGION }}
          
          echo "Created backup snapshot: $SNAPSHOT_ID"

      - name: Perform rollback
        run: |
          echo "Rolling back from ${{ steps.current.outputs.current-task-def }} to ${{ steps.target.outputs.target-task-def }}"
          
          aws ecs update-service \
            --cluster ${{ steps.infra.outputs.ecs-cluster }} \
            --service ${{ steps.infra.outputs.ecs-service }} \
            --task-definition ${{ steps.target.outputs.target-task-def }} \
            --region ${{ env.AWS_REGION }}

      - name: Wait for rollback completion
        run: |
          echo "Waiting for rollback to complete..."
          aws ecs wait services-stable \
            --cluster ${{ steps.infra.outputs.ecs-cluster }} \
            --services ${{ steps.infra.outputs.ecs-service }} \
            --region ${{ env.AWS_REGION }}

      - name: Verify rollback
        run: |
          # Verify the service is using the target task definition
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ steps.infra.outputs.ecs-cluster }} \
            --services ${{ steps.infra.outputs.ecs-service }} \
            --query 'services[0].taskDefinition' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          if [ "$CURRENT_TASK_DEF" = "${{ steps.target.outputs.target-task-def }}" ]; then
            echo "Rollback successful: Service is now using $CURRENT_TASK_DEF"
          else
            echo "Rollback verification failed: Expected ${{ steps.target.outputs.target-task-def }}, got $CURRENT_TASK_DEF"
            exit 1
          fi

      - name: Health check after rollback
        run: |
          APP_URL="${{ steps.infra.outputs.app-url }}"
          echo "Performing health check on $APP_URL/health"
          
          for i in {1..30}; do
            if curl -f -s "$APP_URL/health" > /dev/null; then
              echo "Health check passed after rollback"
              exit 0
            fi
            echo "Health check attempt $i/30 failed, retrying in 10 seconds..."
            sleep 10
          done
          
          echo "Health check failed after rollback"
          exit 1

  rollback-database:
    name: Rollback Database
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: github.event.inputs.rollback_type == 'database_restore'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify snapshot exists
        run: |
          if ! aws rds describe-db-snapshots \
            --db-snapshot-identifier ${{ github.event.inputs.snapshot_id }} \
            --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "Snapshot ${{ github.event.inputs.snapshot_id }} does not exist"
            exit 1
          fi
          
          echo "Snapshot ${{ github.event.inputs.snapshot_id }} verified"

      - name: Scale down application
        run: |
          # Get ECS service details
          cd backend/terraform
          terraform init
          
          ENV_FILE="environments/${{ github.event.inputs.environment }}.tfvars"
          if [ "${{ github.event.inputs.environment }}" = "development" ]; then
            ENV_FILE="environments/dev.tfvars"
          fi
          
          terraform refresh -var-file="$ENV_FILE"
          
          ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)
          ECS_SERVICE=$(terraform output -raw ecs_service_name)
          
          # Scale down to 0 tasks
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --desired-count 0 \
            --region ${{ env.AWS_REGION }}
          
          # Wait for tasks to stop
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}

      - name: Restore database from snapshot
        run: |
          DB_IDENTIFIER="book-review-platform-${{ github.event.inputs.environment }}-db"
          if [ "${{ github.event.inputs.environment }}" = "development" ]; then
            DB_IDENTIFIER="book-review-platform-dev-db"
          fi
          
          NEW_DB_IDENTIFIER="${DB_IDENTIFIER}-restored-$(date +%Y%m%d-%H%M%S)"
          
          echo "Restoring database from snapshot ${{ github.event.inputs.snapshot_id }}"
          
          aws rds restore-db-instance-from-db-snapshot \
            --db-instance-identifier $NEW_DB_IDENTIFIER \
            --db-snapshot-identifier ${{ github.event.inputs.snapshot_id }} \
            --region ${{ env.AWS_REGION }}
          
          # Wait for restore to complete
          aws rds wait db-instance-available \
            --db-instance-identifier $NEW_DB_IDENTIFIER \
            --region ${{ env.AWS_REGION }}
          
          echo "Database restored as $NEW_DB_IDENTIFIER"
          echo "Manual intervention required to update connection strings and delete old database"

      - name: Notify manual intervention required
        run: |
          echo "⚠️  MANUAL INTERVENTION REQUIRED ⚠️"
          echo ""
          echo "Database has been restored from snapshot, but manual steps are needed:"
          echo "1. Update Terraform configuration to use the new database identifier"
          echo "2. Apply Terraform changes to update connection strings"
          echo "3. Scale the application back up"
          echo "4. Verify application connectivity"
          echo "5. Delete the old database instance after verification"
          echo ""
          echo "New database identifier: ${NEW_DB_IDENTIFIER}"

  notify-completion:
    name: Notify Rollback Completion
    runs-on: ubuntu-latest
    needs: [rollback-application, rollback-database]
    if: always()
    
    steps:
      - name: Notify rollback status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "Rollback ${{ job.status }} for ${{ github.event.inputs.environment }} environment",
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ github.event.inputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Rollback Type",
                      "value": "${{ github.event.inputs.rollback_type }}",
                      "short": true
                    },
                    {
                      "title": "Target Version",
                      "value": "${{ github.event.inputs.target_version || 'Previous' }}",
                      "short": true
                    },
                    {
                      "title": "Initiated By",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}